{"version":3,"sources":["../../src/index.ts","../../../src/utilities/object-utilities.ts","../../../src/core/entities.ts","../../../src/core/form-builder.ts","../../../src/core/queryable.ts","../../../src/utilities/input-mapping.ts","form/form-primitive-input.tsx","form/form-item.tsx","form/form.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormPrimitiveInput","props","useState","value","setValue","type","primitiveNameToInputType","typeOfPrimitive","updateValue","newValue","onValueChange","formatValue","onChange","event","customTypeOf","target","checked","stringToPrimitive","date","yearStr","getFullYear","toString","padStart","monthStr","getMonth","dayStr","getDate","formatDate","String","FormItem","item","setItem","onItemChange","newItem","onItemPropChange","itemObj","prop","newItemObj","deepCopy","onArrayElementChange","itemArr","index","newItemArr","isPrimitive","Array","className","map","arrayItem","i","length","newArrayItem","Object","getKeys","key","Form","specification","setSpecification","newSpecification","specificationCopy","onSpecificationChange","onClick","preventDefault","onSubmit","App","FormBuilder","entity","q","select","children","child","defaultEntity","grades","result","setResult","submitted","setSubmitted","id","data-submitted","console","log","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1812262.chunk.js","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./core/form-builder\"), exports);\n__exportStar(require(\"./utilities/helper-types\"), exports);\n__exportStar(require(\"./utilities/input-mapping\"), exports);\n__exportStar(require(\"./utilities/object-utilities\"), exports);\n__exportStar(require(\"./core/entities\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deepCopy = exports.customTypeOf = exports.typeCheckFunctions = exports.getKeys = exports.extendTypeOf = exports.omitProps = exports.pickProps = exports.addPropToObject = void 0;\n/**\n * Create a copy of an object and add a new property to it.\n * @param object To source object that the `prop` and `value` will be added to.\n * @param prop Name of the property to be added.\n * @param value The value to be given to the property.\n * @returns A copy of `object` with the given `prop` and `value` added to it.\n */\nconst addPropToObject = (object, prop, value) => (Object.assign(Object.assign({}, object), { [prop]: value }));\nexports.addPropToObject = addPropToObject;\n/**\n * Picks a given list of properties from an object.\n * @param object Object from which the properties will be picked.\n * @param props List of properties that will be picked from the object.\n * @returns A copy of the object containing only the picked properties.\n */\nconst pickProps = (object, ...props) => {\n    const ret = {}; // unavoidable cast\n    props.forEach(prop => ret[prop] = object[prop]);\n    return ret;\n};\nexports.pickProps = pickProps;\n/**\n * Omits a given list of properties from an object.\n * @param object Object from which the properties will be omitted.\n * @param props List of properties that will be omitted from the object.\n * @returns A copy of the object containing only the properties that were not omitted.\n */\nconst omitProps = (object, ...props) => {\n    const ret = Object.assign({}, object);\n    props.forEach(prop => delete ret[prop]);\n    return ret;\n};\nexports.omitProps = omitProps;\n/**\n * Extended typeof function for date and arrays\n * @param Prop to be checked.\n * @returns The type as a string\n */\nconst extendTypeOf = (prop) => {\n    return typeof (prop) !== \"object\" ? typeof (prop) :\n        prop instanceof Date ? \"date\" :\n            prop instanceof Array ? \"array\" :\n                \"object\";\n};\nexports.extendTypeOf = extendTypeOf;\n/**\n * Returns a list of all the properties in for a given object\n * in a type safe way.\n * This function basically wraps `Object.keys` and retains\n * the type information of its keys.\n * @param object from which the keys will be returned.\n * @returns a list of strings of all the properties on `object`.\n */\nconst getKeys = (object) => Object.keys(object);\nexports.getKeys = getKeys;\n/**\n * Map of type names and the corresponding function used to\n * check if a value is of that type.\n */\nexports.typeCheckFunctions = {\n    undefined: v => typeof v === \"undefined\",\n    boolean: v => typeof v === \"boolean\",\n    number: v => typeof v === \"number\",\n    bigint: v => typeof v === \"bigint\",\n    string: v => typeof v === \"string\",\n    symbol: v => typeof v === \"symbol\",\n    function: v => typeof v === \"function\",\n    object: v => typeof v === \"object\",\n    date: v => v instanceof Date,\n    array: v => v instanceof Array\n};\n/**\n * Checks if the given variable `val` is equal to the type name\n * given in `typename`.\n * This function can be used as a type guard when working with\n * generic data types.\n * @param val the value for which the type will be checked.\n * @param typeName name of the type that the value will be checked against.\n * @returns `true` if the value is indeed equal to the given `value`,\n * returns `false` otherwise.\n */\nconst customTypeOf = (val, typeName) => exports.typeCheckFunctions[typeName](val);\nexports.customTypeOf = customTypeOf;\n/**\n * Creates a deep copy of a given object.\n * @param value Object or value to be copied.\n * @returns A copy of the given object or value, without references\n * to the input object.\n */\nconst deepCopy = (value) => {\n    if (typeof value !== \"object\")\n        return value;\n    const objCopy = Object.assign({}, value);\n    if (value instanceof Array)\n        return Object.assign([], objCopy, value.map(element => exports.deepCopy(element)));\n    else if (value instanceof Date)\n        return Object.assign(new Date(value), objCopy);\n    exports.getKeys(value).forEach(key => {\n        if (value[key] instanceof Object)\n            objCopy[key] = exports.deepCopy(value[key]);\n    });\n    return objCopy;\n};\nexports.deepCopy = deepCopy;\n//# sourceMappingURL=object-utilities.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultEntity = void 0;\n// Entity constructors\nconst defaultStudent = () => ({\n    name: \"\",\n    surname: \"\",\n    grades: [],\n    courses: [],\n    birthday: new Date()\n});\nconst defaultCourse = () => ({\n    name: \"\",\n    studyPoints: 0,\n    lectures: [],\n    active: false\n});\nconst defaultGrades = () => ({\n    grade: 0,\n    course: defaultCourse()\n});\nconst defaultLecture = () => ({\n    title: \"\",\n    topic: \"\"\n});\n/**\n * @name defaultConstructors\n * Object containing constructor functions for all entitiy types.\n * Each function will return the default version of that entity.\n *\n * When a new entity is added to the global `Entities` set, the developer is\n * forced by Typescript to also implement a default constructor for that entity in\n * this object.\n */\nconst defaultConstructors = {\n    Student: defaultStudent,\n    Course: defaultCourse,\n    Grades: defaultGrades,\n    Lecture: defaultLecture\n};\n/**\n * Returns the default 'empty' version of an entity. Containing default values for that object.\n * Constructors for these entities are defined in the `defaultConstructors` object.\n *\n * @summary Returns the default version of an entity.\n * @param name The name of the entity for which to retrieve the default object.\n * @returns A default entity object corresponding to the type `name`\n */\nconst defaultEntity = (name) => defaultConstructors[name]();\nexports.defaultEntity = defaultEntity;\n// The cast to Entities[Name] is needed because Typescript can't seem to properly resolve\n// the type from the key being selected from the map defaultConstructors.\n//# sourceMappingURL=entities.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormBuilder = void 0;\nconst entities_1 = require(\"./entities\");\nconst queryable_1 = require(\"./queryable\");\n/**\n * Type definition for the `FormBuilder`, the root object of the project.\n *\n * @param specification The specification the build step shoud be initialized with.\n * @returns A new `FormBuilderStep` instance.\n */\nconst FormBuilderStep = (specification) => ({\n    specification: specification,\n    entity: (entity, q, data = entities_1.defaultEntity(entity)) => FormBuilderStep(Object.assign(Object.assign({}, specification), { [entity]: [q(queryable_1.queryable(data)).querried]\n    }))\n});\n/**\n * `FormBuilder` instance, creating a new and empty FormBuilder, ready to use.\n *\n * @returns A new `FormBuilder` instance.\n */\nexports.FormBuilder = (() => FormBuilderStep({}))();\n//# sourceMappingURL=form-builder.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.queryable = void 0;\nconst object_utilities_1 = require(\"../utilities/object-utilities\");\n/**\n * Creates an instance of a `Queryable` type, with a given `querried` state as starting point.\n *\n * A Queryable can be used to easily query properties and child objects of an object.\n * @param object Input object that will be querried.\n * @param querried Object that will contain all the properties that have been querried from the input object.\n * When creating a new Queryable this should be `{}`.\n * @returns A new Queryable instance.\n */\nconst queryableStep = (object, querried) => {\n    return {\n        object: object,\n        querried: querried,\n        select: (...props) => queryableStep(object_utilities_1.omitProps(object, ...props), Object.assign(Object.assign({}, querried), object_utilities_1.pickProps(object, ...props))),\n        child: (prop, queryFunction) => {\n            const querriedChild = queryFunction(exports.queryable(object[prop])).querried;\n            return queryableStep(object_utilities_1.omitProps(object, prop), Object.assign(Object.assign({}, querried), { [prop]: querriedChild }));\n        },\n        children: (prop, queryFunction) => {\n            const list = object[prop];\n            const querriedList = list.map(element => {\n                return queryFunction(exports.queryable(element)).querried;\n            });\n            return queryableStep(object_utilities_1.omitProps(object, prop), Object.assign(Object.assign({}, querried), { [prop]: querriedList }));\n        }\n    };\n};\n/**\n * Creates an instance of a `Queryable` type.\n *\n * @param object Input object that will be querried.\n * @returns A new Queryable instance.\n */\nconst queryable = (object) => queryableStep(object, {});\nexports.queryable = queryable;\n//# sourceMappingURL=queryable.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.typeOfPrimitive = exports.isPrimitive = exports.stringToPrimitive = exports.primitiveNameToInputType = void 0;\nconst object_utilities_1 = require(\"./object-utilities\");\n/**\n * Takes the name of a primitive data type, and returns the a string\n * that can be used for the `type` attribute of an html input element.\n * For example the type `\"boolean\"` will return `\"checkbox\"`.\n * @param primitiveType name of the primitive data type.\n * @returns the type name for an input element.\n */\nfunction primitiveNameToInputType(primitiveType) {\n    const typeMapping = {\n        string: \"text\",\n        number: \"number\",\n        boolean: \"checkbox\",\n        date: \"date\"\n    };\n    return typeMapping[primitiveType];\n}\nexports.primitiveNameToInputType = primitiveNameToInputType;\n/**\n * Takes a string value, converts the string value to the given\n * primitive data type.\n * Used when converting the value from an html input element to\n * the correct data type.\n * @param value the value to be converted.\n * @param primitiveType name of the type to which the value will be converted.\n * @returns the converted value of the type corresponding to `primitiveType`.\n */\nfunction stringToPrimitive(value, primitiveType) {\n    const castMapping = {\n        string: val => String(val),\n        number: val => Number(val),\n        boolean: val => Boolean(val),\n        date: val => new Date(val),\n    };\n    return castMapping[primitiveType](value);\n}\nexports.stringToPrimitive = stringToPrimitive;\n/**\n * Type guard function to check if a given value is a primitive type.\n * Used to ensure type safety when handling user input.\n * @param value The value to be checked.\n * @returns `true` if the value is a primitive type,\n * returns `false` otherwise.\n */\nfunction isPrimitive(value) {\n    const isPrimitiveMap = {\n        string: true,\n        number: true,\n        boolean: true,\n        date: true\n    };\n    const typeKeys = object_utilities_1.getKeys(isPrimitiveMap);\n    for (let i = 0; i < typeKeys.length; i++) {\n        const typeKey = typeKeys[i];\n        if (object_utilities_1.customTypeOf(value, typeKey))\n            return true;\n    }\n    return false;\n}\nexports.isPrimitive = isPrimitive;\n/**\n * Returns the primitive type name of a given value.\n * This function is similair to `extendTypeOf` and javascript's\n * built-in `typeof` operator. But only handles primitive form types\n * to ensure type safety.\n * @param value of a primitive data type.\n * @returns the name of the primitive data type in the form of a string.\n */\nfunction typeOfPrimitive(value) {\n    const primitiveTypeCheckFunctions = {\n        boolean: object_utilities_1.typeCheckFunctions.boolean,\n        number: object_utilities_1.typeCheckFunctions.number,\n        string: object_utilities_1.typeCheckFunctions.string,\n        date: object_utilities_1.typeCheckFunctions.date\n    };\n    const keys = object_utilities_1.getKeys(primitiveTypeCheckFunctions);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (primitiveTypeCheckFunctions[key](value)) {\n            return key;\n        }\n    }\n    return \"string\";\n}\nexports.typeOfPrimitive = typeOfPrimitive;\n//# sourceMappingURL=input-mapping.js.map","import { useState } from \"react\";\nimport { customTypeOf, primitiveNameToInputType, PrimitiveTypes, stringToPrimitive, typeOfPrimitive } from \"typesafe-form-builder\";\n\ntype FormPrimitiveInputProps<Value extends PrimitiveTypes> = {\n    value: Value,\n    onValueChange: <R>(value: Value) => R | void\n}\n\nexport function FormPrimitiveInput <Value extends PrimitiveTypes>(props: FormPrimitiveInputProps<Value>) {\n\n    /**\n     * The value state variable contains a primitive value that's\n     * contained in the specification object.\n     * For each of these primitive types an html input element\n     * can be created, and input can be saved into this variable.\n     */\n    const [value, setValue] = useState(props.value);\n    \n    /**\n     * Type of the input element.\n     * This ensures correct data is entered into the form.\n     */\n    const type = primitiveNameToInputType(typeOfPrimitive(value));\n\n    /**\n     * Function to update value and execute callback.\n     * @param newValue\n     */\n    const updateValue = (newValue: Value) => {\n        props.onValueChange(newValue);\n        setValue(newValue);\n    }\n\n    /**\n     * Called when the input field is changed.\n     * Has to be cast back to the generic `Value` type because\n     * everything is a string in HTML.\n     * @param event event from the input element\n     */\n    const onChangeEvent = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (customTypeOf(value, \"boolean\"))\n            updateValue(event.target.checked as Value);\n        else\n            updateValue(stringToPrimitive(event.target.value, typeOfPrimitive(value)) as Value);\n    }\n\n    return <input type={type} value={formatValue(value)} onChange={onChangeEvent}></input>\n}\n\n/**\n * Formats a date into te yyyy-mm-dd format.\n * @param date date object to be formatted.\n * @returns formatted date as a string.\n */\nconst formatDate = (date: Date): string => {\n    const yearStr = date.getFullYear().toString().padStart(4, '0');\n    const monthStr = (date.getMonth()+1).toString().padStart(2, '0');\n    const dayStr = date.getDate().toString().padStart(2, '0');\n    return `${yearStr}-${monthStr}-${dayStr}`;\n}\n\n/**\n * Formats a value to the correct string so its accepted\n * as value for the input element.\n * @param value primitive value to be formatted to a string\n * @returns the `value` formatted as a string.\n */\nconst formatValue = (value: PrimitiveTypes): string => {\n    if (customTypeOf(value, 'date'))\n        return formatDate(value);\n    return String(value);\n}\n\n","import { useState } from \"react\";\nimport './form-item.scss';\nimport { deepCopy, getKeys, isPrimitive, PrimitiveTypes } from \"typesafe-form-builder\";\nimport { FormPrimitiveInput } from \"./form-primitive-input\";\n\ntype FormItemProps<Item extends PrimitiveTypes | Object> = {\n    item: Item,\n    onItemChange: <R>(item: Item) => R | void\n}\n\nexport function FormItem <Item extends PrimitiveTypes | Object>(props: FormItemProps<Item>) {\n\n    /**\n     * An item can be any nested object or primitive property in the\n     * specification object.\n     */\n    const [item, setItem] = useState(props.item);\n\n    /**\n     * Called when the item is modified.\n     * Updates the state and executes callback with new value.\n     * @param newItem \n     */\n    const onItemChange = (newItem: Item) => {\n        props.onItemChange(newItem);\n        setItem(newItem);\n    }\n\n    /**\n     * Called when item is an object, and one of its properties is modified.\n     * @param itemObj the current item.\n     * @param prop the prop whose value was modified.\n     * @param value the new value of the given property.\n     */\n    const onItemPropChange = <ItemObj extends Object & Item>(itemObj: ItemObj, prop: keyof ItemObj, value: ItemObj[typeof prop]) => {\n        const newItemObj = deepCopy(itemObj);\n        newItemObj[prop] = value;\n        onItemChange(newItemObj);\n    }\n\n    /**\n     * Called when item is an array, and one of its elements is modified.\n     * @param itemArr the current item.\n     * @param index index of the element that was changed.\n     * @param value new value for the given index.\n     */\n    const onArrayElementChange = <Element, ItemArr extends Array<Element> & Item>(itemArr: ItemArr, index: number, value: Element) => {\n        const newItemArr = deepCopy(itemArr);\n        newItemArr[index] = value;\n        onItemChange(newItemArr);\n    }\n\n    if (isPrimitive(item))\n        return <FormPrimitiveInput value={item} onValueChange={onItemChange} />\n    else if (item instanceof Array)\n        return <>\n        <br/>\n        <ul className=\"array\">\n            {item.map((arrayItem, i) => <li key={i}>\n                {item.length > 1 ? <span className=\"num\">{i+1}</span> : null}\n                <FormItem item={arrayItem} onItemChange={newArrayItem => onArrayElementChange(item, i, newArrayItem)} />\n            </li>)}\n        </ul>\n        </>\n    else if (item instanceof Object)\n        return <div className=\"object\">\n            {getKeys(item).map(key => \n            <div key={String(key)} className=\"keyValue\">\n                <label>{key}</label>\n                <FormItem item={item[key]} onItemChange={(newItem) => onItemPropChange(item, key, newItem)}/>\n            </div>)}\n        </div>\n    return <span>Form Item</span>\n}\n","import React, { useState } from \"react\";\nimport './form.scss';\nimport { deepCopy } from \"typesafe-form-builder\";\nimport { FormItem } from \"./form-item\";\n\ntype FormProps<Spec extends Object> = {\n    specification: Spec,\n    onSpecificationChange: <R>(newSpecification: Spec) => R | void,\n    onSubmit: <R>(newSpecification: Spec) => R | void\n}\n\nexport function Form <Spec extends Object>(props: FormProps<Spec>) {\n\n    /**\n     * Specification state is created from the specification given through\n     * this component's props.\n     */\n    const [specification, setSpecification] = useState(props.specification);\n\n    /**\n     * Called when the data in the specification is modified.\n     * @param newSpecification new specification object with updated data.\n     */\n    const onSpecificationChange = (newSpecification: Spec) => {\n        const specificationCopy = {...newSpecification};\n        props.onSpecificationChange(specificationCopy);\n        setSpecification(specificationCopy);\n    }\n\n    /**\n     * This is the callback for the submit button of the form.\n     * It gives the current specification to whatever parent component \n     * is using this form component.\n     * @param event \n     */\n    const onSubmitClicked = (event: React.FormEvent) => {\n        event.preventDefault();\n        props.onSubmit(deepCopy({...specification}));\n    }\n    \n    return <form>\n        <FormItem item={specification} onItemChange={onSpecificationChange} />\n        <input type=\"submit\" onClick={onSubmitClicked} value=\"Submit\"></input>\n    </form>\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { Form } from './form/form';\nimport { defaultEntity, FormBuilder } from 'typesafe-form-builder';\n\nfunction App() {\n\n    /**\n     * The specification to be rendered by the form builder Angular renderer.\n     * The specification is first built using the FormBuilder's entity and select functions.\n     * This demonstrates how the form builder would be used by a developer.\n     * \n     * In this example the `entity` function is also given a default student object\n     * and two grades. This shows that a developer can provide an already existing object\n     * to the form builder, whose values can then be edited in the form.\n     * Alternatively, for `entity(\"Course\")` no data is provided. Instead, the entity function\n     * will create a default `Course` object to be querried.\n     */\n    const [specification, setSpecification] = useState(\n        FormBuilder\n        .entity(\"Student\", \n            q => q.select(\"name\", \"surname\", \"birthday\")\n                .children(\"grades\", q => q.select(\"grade\")\n                    .child(\"course\", q => q.select(\"name\"))\n                ),\n                {\n                    ...defaultEntity(\"Student\"),\n                    grades: [defaultEntity(\"Grades\"), defaultEntity(\"Grades\")]\n                }\n            )\n        .entity(\"Course\", \n            q => q.select(\"name\", \"studyPoints\", \"active\"))\n        .specification\n    );\n\n    /**\n     * The result property will contain a deep copy of the specification containing the\n     * user's data when the submit button is pressed.\n     */\n    const [result, setResult] = useState(specification);\n    \n    /**\n     * State variable used to toggle between form input and the submitted results element.\n     */\n    const [submitted, setSubmitted] = useState(false);\n\n    /**\n     * Called when the data in the specification is modified by the form.\n     * @param newSpecification new specification object with updated data.\n     */\n    const onSpecificationChange = (newSpecification: typeof specification) => {\n        setSpecification({...newSpecification});\n    }\n    \n    /**\n     * This is an example function to show how a developer who uses the\n     * form builder might handle the submit event.\n     * In the underlying form builder a deep copy of the specification is made.\n     * The developer can then handle this data in their own way.\n     */\n    const onFormSubmitted = (newSpecification: typeof specification) => {\n        console.log(\"su\")\n        setResult(newSpecification);\n        setSubmitted(true);\n    }\n\n    /**\n     * Used to return to the form input view when the back button in the results\n     * element is pressed.\n     */\n    const onBackButton = () => setSubmitted(false);\n\n    return (\n        <div id=\"form-builder-example\" data-submitted={submitted}>\n            <section className=\"main\">\n                <h1>Form</h1>\n                <Form \n                    specification={specification}\n                    onSpecificationChange={onSpecificationChange}\n                    onSubmit={onFormSubmitted}\n                />\n            </section>\n\n            <section className=\"main\">\n                <h1>Specification</h1>\n                <p className=\"description\">\n                    This is a live view of the specification object.\n                    <br/>\n                    When values in the form are changed they are also updated in this object.\n                </p>\n                <pre>{JSON.stringify(specification, null, 2)}</pre>\n            </section>\n\n            <section className=\"main\">\n                <h1>Submitted Result</h1>\n                <p className=\"description\">\n                    These are the submitted results of the form.\n                    <br/>\n                    When the submit button is clicked, a deep copy of the specification is made.\n                    The last copy that was made is seen here.\n                </p>\n                <pre>{JSON.stringify(result, null, 2)}</pre>\n            </section>\n\n            <section className=\"result\">\n                <h1>Form Submitted!</h1>\n                <p>\n                    These are the submitted results of the form.\n                    <br/><br/>\n                    When the submit button is clicked, a deep copy of the specification is made.\n                    <br/>\n                    This copy is seen here.\n                    <br/><br/>\n                    A developer using the form builder can choose how to handle these results.\n                    <br/>\n                    For example, sending them to a back-end endpoint.\n                    <br/>\n                    Right now, the results are simply displayed here.\n                </p>\n                <h3>Submitted Form Data</h3>\n                <pre>{JSON.stringify(result, null, 2)}</pre>\n                <input type=\"button\" value=\"Back\" onClick={onBackButton}></input>\n            </section>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}